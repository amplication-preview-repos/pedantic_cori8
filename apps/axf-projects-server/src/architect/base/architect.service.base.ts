/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Architect as PrismaArchitect } from "@prisma/client";

export class ArchitectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ArchitectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.architect.count(args);
  }

  async architects(
    args: Prisma.ArchitectFindManyArgs
  ): Promise<PrismaArchitect[]> {
    return this.prisma.architect.findMany(args);
  }
  async architect(
    args: Prisma.ArchitectFindUniqueArgs
  ): Promise<PrismaArchitect | null> {
    return this.prisma.architect.findUnique(args);
  }
  async createArchitect(
    args: Prisma.ArchitectCreateArgs
  ): Promise<PrismaArchitect> {
    return this.prisma.architect.create(args);
  }
  async updateArchitect(
    args: Prisma.ArchitectUpdateArgs
  ): Promise<PrismaArchitect> {
    return this.prisma.architect.update(args);
  }
  async deleteArchitect(
    args: Prisma.ArchitectDeleteArgs
  ): Promise<PrismaArchitect> {
    return this.prisma.architect.delete(args);
  }
}
