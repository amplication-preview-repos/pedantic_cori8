/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ArchitectService } from "../architect.service";
import { ArchitectCreateInput } from "./ArchitectCreateInput";
import { Architect } from "./Architect";
import { ArchitectFindManyArgs } from "./ArchitectFindManyArgs";
import { ArchitectWhereUniqueInput } from "./ArchitectWhereUniqueInput";
import { ArchitectUpdateInput } from "./ArchitectUpdateInput";

export class ArchitectControllerBase {
  constructor(protected readonly service: ArchitectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Architect })
  async createArchitect(
    @common.Body() data: ArchitectCreateInput
  ): Promise<Architect> {
    return await this.service.createArchitect({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Architect] })
  @ApiNestedQuery(ArchitectFindManyArgs)
  async architects(@common.Req() request: Request): Promise<Architect[]> {
    const args = plainToClass(ArchitectFindManyArgs, request.query);
    return this.service.architects({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Architect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async architect(
    @common.Param() params: ArchitectWhereUniqueInput
  ): Promise<Architect | null> {
    const result = await this.service.architect({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Architect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateArchitect(
    @common.Param() params: ArchitectWhereUniqueInput,
    @common.Body() data: ArchitectUpdateInput
  ): Promise<Architect | null> {
    try {
      return await this.service.updateArchitect({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Architect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteArchitect(
    @common.Param() params: ArchitectWhereUniqueInput
  ): Promise<Architect | null> {
    try {
      return await this.service.deleteArchitect({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
